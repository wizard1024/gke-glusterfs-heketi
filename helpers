#!/bin/bash

# ------------------------- [START] set shell options ------------------------ #
# exit script immediately if anything errors
#set -e

# allow tracing to be toggled on
if [ "$DEBUG_GKE_GLUSTERFS_HEKETI" = 'true' ]
then
  set -x
fi
# -------------------------- [END] set shell options ------------------------- #

# ------------------------- [START] get project path ------------------------- #
# get full path to this project
project_dir="$(cd -P -- "$(dirname -- "$0")" 2>&1 > /dev/null && pwd -P)"

# check that the project directory didn't turn out empty
if [ -z "$project_dir" ]
then
  echo "Some error occured getting the full path to this project's directory."

  # this is intended to be sourced instead of executed so we return
  # instead of exiting so we don't exit the shell session entirely
  return 1
fi
# -------------------------- [END] get project path -------------------------- #

# ------------------------ [START] source config file ------------------------ #
. "$project_dir/config"
# ------------------------- [END] source config file ------------------------- #

# ---------------------- [START] set required variables ---------------------- #
export project_name="$CLOUDSDK_PROJECT_NAME"
export cluster_name="$CLOUDSDK_CLUSTER_NAME"
export zone="$CLOUDSDK_COMPUTE_ZONE"
export subnet="$CLOUDSDK_COMPUTE_SUBNET"
export network="$CLOUDSDK_COMPUTE_NET"
export cluster_ip_cidr="$CLUSTER_IP_CIDR"
export cluster_ip_services="$CLUSTER_IP_SERVICES"
# ----------------------- [END] set required variables ----------------------- #

# ---------------------- [START] set optional variables ---------------------- #
# cluster version will default to whatever GKE's default is at the time
export cluster_version="$CLUSTER_VERSION"
export node_count=${NODE_COUNT:-'4'}
export machine_type=${MACHINE_TYPE:-'n1-standard-2'}

export docker_registry=${DOCKER_REGISTRY:-"gcr.io/$project_name"}
export docker_image_name=${DOCKER_IMAGE_NAME:-'glusterfs-heketi-bootstrap'}
export docker_image_version=${DOCKER_IMAGE_VERSION:-'0.0.1'}

if [ -z "$DOCKER_IMAGE_NAME" ]
then
  export job_image='tymlezgkek8s/gke-glusterfs-heketi:latest'
else
  export job_image="$docker_registry/$docker_image_name:$docker_image_version"
fi
# ----------------------- [END] set optional variables ----------------------- #

# ---------------- [START] ensure script requirements are met ---------------- #
script_requirements_met='true'

if [ -z "$(which gcloud)" ]
then
  echo "You need gcloud installed."
  echo "Visit https://cloud.google.com/sdk/downloads to download the latest version."

  script_requirements_met='false'
fi

if [ -z "$(which kubectl)" ]
then
  echo "You need kubectl installed."
  echo "If you already have gcloud installed, run 'gcloud components install kubectl'."
  script_requirements_met='false'
fi

if [ -z "$project_name" ] || [ -z "$cluster_name" ] || [ -z "$zone" ]
then
  echo "You're missing required config variables."
  echo "Make sure there are values for everything under \"required variables\" in $project_dir/config"

  script_requirements_met='false'
fi

if [ "$node_count" -lt 3 ]
then
  echo "You need at least 3 nodes in the cluster for Heketi to run properly"

  script_requirements_met='false'
fi

if [ "$script_requirements_met" = 'false' ]
then
  # this is intended to be sourced instead of executed so we return
  # instead of exiting so we don't exit the shell session entirely
  return 1
fi
# ----------------- [END] ensure script requirements are met ----------------- #

# ------------------------- [START] helper functions ------------------------- #
gke_glusterfs_heketi_build_image () {
  if [ -z "$(which docker)" ]
  then
    echo "You need docker installed to build this image."
  else
    docker build -t "$docker_registry/$docker_image_name:$docker_image_version" "$project_dir"
  fi
}

gke_glusterfs_heketi_push_image () {
  gcloud docker -- push "$docker_registry/$docker_image_name:$docker_image_version"
}

gke_glusterfs_heketi_generate_k8s () {
  rm -rf "$project_dir/k8s"

  mkdir -p "$project_dir/k8s"

  cat > "$project_dir/k8s/00-namespace.yaml" <<EOF
---
apiVersion: v1
kind: Namespace
metadata:
  name: glusterfs-heketi-bootstrap
EOF

cat > "$project_dir/k8s/01-configmap.yaml" <<EOF
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: glusterfs-heketi-bootstrap
  namespace: glusterfs-heketi-bootstrap
data:
  project-id: $project_name
  cluster-name: $cluster_name
  cluster-zone: $zone
  cluster-node-count: "$node_count"
  network: $network
EOF

cat > "$project_dir/k8s/02-job.yaml" <<EOF
---
apiVersion: batch/v1
kind: Job
metadata:
  name: glusterfs-heketi-bootstrap
  namespace: glusterfs-heketi-bootstrap
spec:
  template:
    metadata:
      name: glusterfs-heketi-bootstrap
    spec:
      restartPolicy: Never
      containers:
      - name: glusterfs-heketi-bootstrap
        image: $job_image
        securityContext:
          capabilities: {}
          privileged: true
        env:
        - name: PROJECT_ID
          valueFrom:
            configMapKeyRef:
              name: glusterfs-heketi-bootstrap
              key: project-id
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: glusterfs-heketi-bootstrap
              key: cluster-name
        - name: ZONE
          valueFrom:
            configMapKeyRef:
              name: glusterfs-heketi-bootstrap
              key: cluster-zone
        - name: NETWORK
          valueFrom:
            configMapKeyRef:
              name: glusterfs-heketi-bootstrap
              key: network
        - name: NODE_COUNT
          valueFrom:
            configMapKeyRef:
              name: glusterfs-heketi-bootstrap
              key: cluster-node-count
      imagePullSecrets:
      - name: rtc-regcred
EOF
}

gke_glusterfs_heketi_delete_gluster_disks () {
  disk_count=0
  disk_list=""

  echo "Deleting..."
  for disk in $(gcloud compute --project "$project_name" disks list --format="table(name)" --filter="description=${cluster_name}-gfs-k8s-brick")
  do
    if [ "$disk_count" -eq 0 ]
    then
      # do nothing, the first returned is just a table header
      echo ""
    else
      disk_list="$disk_list $disk"
    fi

    disk_count=$((disk_count + 1))
  done

  gcloud compute --project "$project_name" disks delete --quiet $disk_list
}

gke_glusterfs_heketi_deploy_glusterfs_heketi () {
  kubectl apply -f "$project_dir/k8s"
}

gke_glusterfs_heketi_create_cluster () {
  "$project_dir/scripts/create-cluster.sh"
  if [ $? -ne 0 ]; then
	  exit 1
  fi
}

gke_glusterfs_heketi_create_cluster_network () {
  "$project_dir/scripts/create-cluster-network.sh"
  if [ $? -ne 0 ]; then
	  exit 1
  fi
}

gke_glusterfs_heketi_delete_cluster () {
  gcloud container --project "$project_name" clusters delete "$cluster_name" --quiet --zone=$zone
  gcloud compute --project "$project_name" firewall-rules delete "${cluster_name}-allow-glusterfs"
}

gke_glusterfs_heketi_delete_cluster_and_disks () {
  gke_glusterfs_heketi_delete_cluster && \
  gke_glusterfs_heketi_delete_gluster_disks
}
# -------------------------- [END] helper functions -------------------------- #

# --------------------------- [START] print config --------------------------- #
echo "---------------------------------------------"
echo "Functions available:"
echo "- gke_glusterfs_heketi_build_image"
echo "- gke_glusterfs_heketi_push_image"
echo "- gke_glusterfs_heketi_generate_k8s"
echo "- gke_glusterfs_heketi_delete_gluster_disks"
echo "- gke_glusterfs_heketi_deploy_glusterfs_heketi"
echo "- gke_glusterfs_heketi_create_cluster"
echo "- gke_glusterfs_heketi_delete_cluster"
echo "- gke_glusterfs_heketi_delete_cluster_and_disks"
echo ""
echo "---------------------------------------------"
echo "Current config:"
echo "- CLOUDSDK_PROJECT_NAME = $project_name"
echo "- CLOUDSDK_CLUSTER_NAME = $cluster_name"
echo "- CLOUDSDK_COMPUTE_ZONE = $zone"
echo "- CLUSTER_VERSION       = $cluster_version"
echo "- NODE_COUNT            = $node_count"
echo "- MACHINE_TYPE          = $machine_type"
echo "- DOCKER_REGISTRY       = $docker_registry"
echo "- DOCKER_IMAGE_NAME     = $docker_image_name"
echo "- DOCKER_IMAGE_VERSION  = $docker_image_version"
echo "---------------------------------------------"
# ---------------------------- [END] print config ---------------------------- #

# --------------- [START] execute command if argument provided --------------- #
if [ ! -z "$1" ]
then
  $1
else
  echo ""
  echo "This script can be run with arguments or by sourcing and calling the functions directly."
  echo "Try './helpers gke_glusterfs_heketi_build_image'"
fi
# ---------------- [END] execute command if argument provided ---------------- #

# ------------------------ [START] unset shell options ----------------------- #
# exit script immediately if anything errors
set +e

# allow tracing to be toggled on
if [ "$DEBUG_GKE_GLUSTERFS_HEKETI" = 'true' ]
then
  set +x
fi
# ------------------------- [END] unset shell options ------------------------ #
